[build]
# Use faster linker and optimizations for cross-platform builds
rustflags = [
  "-C", "target-cpu=native",           # Optimize for host CPU
]

# Enable incremental compilation for development
incremental = true

# Platform-specific configuration
[target.x86_64-apple-darwin]
rustflags = [
  "-C", "link-arg=-Wl,-dead_strip",    # Strip unused symbols on macOS
  "-C", "target-cpu=native",
]

[target.aarch64-apple-darwin]
rustflags = [
  "-C", "link-arg=-Wl,-dead_strip",    # Strip unused symbols on macOS ARM64
  "-C", "target-cpu=native",
]

[target.x86_64-pc-windows-msvc]
rustflags = [
  "-C", "link-arg=/OPT:REF",           # Remove unreferenced functions/data
  "-C", "link-arg=/OPT:ICF",           # Enable COMDAT folding
  "-C", "target-cpu=native",
]

[target.x86_64-pc-windows-gnu]
rustflags = [
  "-C", "link-arg=-Wl,--gc-sections",  # Garbage collect sections (MinGW)
  "-C", "target-cpu=native",
]

[target.i686-pc-windows-gnu]
rustflags = [
  "-C", "link-arg=-Wl,--gc-sections",  # Garbage collect sections (MinGW 32-bit)
  "-C", "target-cpu=native",
]

[target.x86_64-unknown-linux-gnu]
rustflags = [
  "-C", "link-arg=-Wl,--gc-sections",  # Garbage collect sections
  "-C", "target-cpu=native",
]

[target.aarch64-unknown-linux-gnu]
rustflags = [
  "-C", "link-arg=-Wl,--gc-sections",  # Garbage collect sections for ARM64 Linux
  "-C", "target-cpu=native",
]

# Faster compilation during development
[profile.dev]
opt-level = 1              # Some optimization for faster development
debug = 1                  # Reduced debug info
incremental = true
codegen-units = 256        # More parallel codegen units
rpath = false

# Maximum performance for release builds
[profile.release]
opt-level = 3              # Maximum optimization
lto = "thin"               # Thin LTO for faster linking
codegen-units = 1          # Single codegen unit for better optimization
panic = "abort"            # Abort on panic (smaller binary)
strip = "symbols"          # Strip symbols
rpath = false

# Fast release builds for development testing
[profile.release-dev]
inherits = "release"
opt-level = 2
lto = false
debug = 1
strip = false

# Cross-compilation helpers
[net]
# Use Git CLI for private repositories if needed
git-fetch-with-cli = true

# Registry configuration for faster builds
[source.crates-io]
replace-with = "vendored-sources"

[source.vendored-sources]
directory = "vendor"

# Environment variables for cross-compilation
[env]
# Windows cross-compilation
CC_x86_64-pc-windows-gnu = "x86_64-w64-mingw32-gcc"
CXX_x86_64-pc-windows-gnu = "x86_64-w64-mingw32-g++"
AR_x86_64-pc-windows-gnu = "x86_64-w64-mingw32-ar"

CC_i686-pc-windows-gnu = "i686-w64-mingw32-gcc"
CXX_i686-pc-windows-gnu = "i686-w64-mingw32-g++"
AR_i686-pc-windows-gnu = "i686-w64-mingw32-ar"

# Linux ARM64 cross-compilation
CC_aarch64-unknown-linux-gnu = "aarch64-linux-gnu-gcc"
CXX_aarch64-unknown-linux-gnu = "aarch64-linux-gnu-g++"
AR_aarch64-unknown-linux-gnu = "aarch64-linux-gnu-ar"