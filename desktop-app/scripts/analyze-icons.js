#!/usr/bin/env node

/**
 * Icon Usage Analyzer
 * Scans the codebase to find all lucide-react icons being used
 * and generates an optimized export list for bundle size reduction.
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const srcDir = path.join(__dirname, '../src/renderer');

function findAllIconUsages() {
  try {
    // Find all .tsx and .ts files that import from lucide-react
    const cmd = `find "${srcDir}" -name "*.tsx" -o -name "*.ts" | xargs grep -h "from.*lucide-react" 2>/dev/null || true`;
    const output = execSync(cmd, { encoding: 'utf8' });
    
    if (!output) {
      console.log('No lucide-react imports found');
      return new Set();
    }

    // Extract icon names from import statements
    const iconSet = new Set();
    const lines = output.split('\n').filter(line => line.trim());
    
    lines.forEach(line => {
      // Match import { IconName1, IconName2 } from 'lucide-react'
      const match = line.match(/import\s*\{([^}]+)\}\s*from\s*['"]lucide-react['"]/);
      if (match) {
        const icons = match[1].split(',').map(icon => {
          // Handle potential aliases like "Badge as LucideBadge"
          return icon.split(' as ')[0].trim();
        });
        icons.forEach(icon => {
          if (icon && /^[A-Z][a-zA-Z0-9]*$/.test(icon)) {
            iconSet.add(icon);
          }
        });
      }
    });

    return iconSet;
  } catch (error) {
    console.error('Error finding icon usages:', error.message);
    return new Set();
  }
}

function findIconsInJSX() {
  try {
    // Find icon names used as JSX components
    const cmd = `find "${srcDir}" -name "*.tsx" | xargs grep -oh "<[A-Z][a-zA-Z0-9]*" 2>/dev/null | sed 's/<//g' | sort | uniq`;
    const output = execSync(cmd, { encoding: 'utf8' });
    
    const possibleIcons = new Set();
    const lines = output.split('\n').filter(line => line.trim());
    
    lines.forEach(iconName => {
      // Filter out obvious React components that aren't icons
      if (iconName && 
          !['React', 'Fragment', 'Suspense', 'Provider'].includes(iconName) &&
          /^[A-Z][a-zA-Z0-9]*$/.test(iconName) &&
          iconName.length > 1) {
        possibleIcons.add(iconName);
      }
    });
    
    return possibleIcons;
  } catch (error) {
    console.error('Error finding JSX icons:', error.message);
    return new Set();
  }
}

function generateOptimizedExports(usedIcons) {
  const sortedIcons = Array.from(usedIcons).sort();
  
  let exportCode = `// Optimized icon exports - auto-generated by analyze-icons.js\n`;
  exportCode += `// Only exports icons that are actually used in the codebase\n`;
  exportCode += `export {\n`;
  
  // Group icons by category for better readability
  const categories = {
    navigation: ['Menu', 'ChevronLeft', 'ChevronRight', 'ChevronUp', 'ChevronDown', 'ArrowLeft', 'ArrowRight', 'Home', 'X'],
    actions: ['Search', 'Plus', 'Minus', 'Check', 'Edit', 'Trash2', 'Copy', 'Share', 'Download', 'Upload', 'Save'],
    communication: ['Mail', 'Send', 'Reply', 'ReplyAll', 'Forward', 'Phone', 'MessageSquare', 'Globe', 'Bell'],
    status: ['Loader2', 'AlertCircle', 'CheckCircle', 'XCircle', 'AlertTriangle', 'Info'],
    ui: ['MoreVertical', 'MoreHorizontal', 'Star', 'Heart', 'Eye', 'EyeOff', 'Grid', 'List'],
    media: ['Image', 'File', 'Folder', 'Video', 'Paperclip'],
    formatting: ['Bold', 'Italic', 'Underline', 'Link', 'AlignLeft', 'AlignCenter', 'AlignRight'],
    time: ['Calendar', 'Clock', 'CalendarDays'],
    users: ['User', 'Users', 'UserPlus', 'Shield'],
    system: ['Settings', 'Cog', 'Sliders', 'Monitor', 'Keyboard', 'Sun', 'Moon']
  };
  
  for (const [category, categoryIcons] of Object.entries(categories)) {
    const foundIcons = categoryIcons.filter(icon => usedIcons.has(icon));
    if (foundIcons.length > 0) {
      exportCode += `  // ${category.charAt(0).toUpperCase() + category.slice(1)}\n`;
      exportCode += `  ${foundIcons.join(',\n  ')},\n\n`;
    }
  }
  
  // Add any remaining icons that weren't categorized
  const categorizedIcons = new Set(Object.values(categories).flat());
  const uncategorized = sortedIcons.filter(icon => !categorizedIcons.has(icon));
  if (uncategorized.length > 0) {
    exportCode += `  // Other\n`;
    exportCode += `  ${uncategorized.join(',\n  ')}\n`;
  }
  
  exportCode += `} from 'lucide-react'\n`;
  
  return exportCode;
}

function main() {
  console.log('üîç Analyzing icon usage in the codebase...\n');
  
  const importedIcons = findAllIconUsages();
  const jsxIcons = findIconsInJSX();
  
  // Combine both sets
  const allIcons = new Set([...importedIcons, ...jsxIcons]);
  
  console.log(`Found ${importedIcons.size} icons in import statements`);
  console.log(`Found ${jsxIcons.size} possible icons in JSX`);
  console.log(`Total unique icons: ${allIcons.size}\n`);
  
  if (allIcons.size === 0) {
    console.log('No icons found. Make sure the src directory contains React components.');
    return;
  }
  
  console.log('üìã Icons found:');
  console.log(Array.from(allIcons).sort().join(', '));
  console.log();
  
  const optimizedExports = generateOptimizedExports(allIcons);
  
  console.log('üìÑ Optimized export code:');
  console.log('=' .repeat(50));
  console.log(optimizedExports);
  console.log('=' .repeat(50));
  
  // Calculate potential savings
  const totalLucideIcons = 1000; // Approximate number of icons in lucide-react
  const usedIcons = allIcons.size;
  const savingsPercent = ((totalLucideIcons - usedIcons) / totalLucideIcons * 100).toFixed(1);
  
  console.log(`\nüí° Potential bundle size reduction:`);
  console.log(`   Using ${usedIcons}/${totalLucideIcons} icons (~${savingsPercent}% size reduction)`);
  console.log(`   Estimated savings: ~${Math.round(200 * (savingsPercent / 100))}KB from lucide-react`);
  
  // Save to file
  const outputFile = path.join(__dirname, '../src/renderer/components/ui/optimized-icons.ts');
  fs.writeFileSync(outputFile, optimizedExports);
  console.log(`\n‚úÖ Optimized exports saved to: ${outputFile}`);
  console.log(`\nüìù Next steps:`);
  console.log(`   1. Review the generated exports`);
  console.log(`   2. Replace the current export * from 'lucide-react' in ui/index.ts`);
  console.log(`   3. Test the build to ensure no icons are missing`);
  console.log(`   4. Run npm run build:renderer to see the size improvement`);
}

if (require.main === module) {
  main();
}

module.exports = { findAllIconUsages, generateOptimizedExports };